#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app,
    cookie = require('../app').cookie,
    store = require('../app').store,
    debug = require('debug')('expressjs:server'),
    http = require('http'),
    load = require('express-load');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */



server.listen(port);

var io = require('socket.io')(server);



server.on('error', onError);
server.on('listening', onListening);

server.on('listening', function (val) {

  io.use(function(socket, next) {
      var data = socket.request;
      cookie(data, {}, function(err) {
          var sessionID = data.signedCookies["SECRETMYSESSION"];
          store.get(sessionID, function(err, session) {
              if (err || !session) {
                  return next(new Error('access denied!'));
              } else {
                  socket.handshake.session = session;
                  return next();
              }
          });
      });
  });
  load('sockets').into(io);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
